{
  "author": {
    "name": "Aran Mulholland"
  },
  "name": "simpleneo4js",
  "description": "A (very) simple node.js connection client for Neo4j",
  "version": "0.0.12",
  "repository": {
    "type": "git",
    "url": "https://github.com/aranm/simpleneo4js.git"
  },
  "dependencies": {
    "superagent": "0.15.5"
  },
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "keywords": [
    "neo4j",
    "graph",
    "database",
    "simple",
    "client",
    "cypher"
  ],
  "main": "lib/simpleneo4js",
  "bugs": {
    "url": "https://github.com/aranm/simpleNeo4js/issues"
  },
  "_id": "simpleneo4js@0.0.12",
  "_from": "simpleneo4js@",
  "readme": "simpleNeo4js\n============\n\nA (very) simple node.js connection client for Neo4j\n\n\n###Usage\n\n```\n            var cypherQuery = 'CREATE (n:User {name: {name}, age: {age} }) RETURN n';\n            var queryParameters = {\n                name: 'Billy Bob',\n                age: 34\n            };\n            \n            var queryResult = simpleNeo4js.query({\n                cypherQuery: cypherQuery,\n                parameters: queryParameters\n            });\n\n            queryResult.on('data', function (data) {\n                //a key value dictionary is returned for every row returned from neo4j\n                //this allows for returning non standard properties like Collect(n)\n                //the return value from the cypher query was n, therefore the data has\n                //a property n with the new data\n                assert.equal(data.n.name, 'Billy Bob', 'User with name is same as passed');\n                assert.equal(data.n['name'], 'Billy Bob', 'User with name is same as passed');\n                assert.equal(data.n.age, 34, 'User with age is same as passed');\n                done();\n            });\n\n            queryResult.on('error', function (error) {\n                done(error);\n            });\n```\n\n###Implementation\n\nThe client is a very thin wrapper and hits the Neo4j REST transactional endpoint, at present it does not do more than one query per transaction (it uses '/db/data/transaction/commit').\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/aranm/simpleneo4js"
}
